--
-- Enables the `gen_random_uuid()` function for generating UUIDs.
-- This should be enabled in your Supabase project.
--
CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;

-- ----------------------------------------------------------------
-- Function and Trigger for auto-updating "updated_at" timestamps.
-- This helper function automatically sets the `updated_at` column
-- to the current time whenever a row in a table is updated.
-- ----------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- ----------------------------------------------------------------
-- Table `public.businesses`
-- Stores information about business entities that use the loyalty system.
-- Includes credentials and a unique QR token for quick login.
-- ----------------------------------------------------------------
CREATE TABLE public.businesses (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    name text NOT NULL,
    email text NOT NULL UNIQUE,
    password text NOT NULL,
    qrToken text NOT NULL UNIQUE,
    qrDataUrl text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Add a comment for security best practices.
COMMENT ON COLUMN public.businesses.password IS 'For production, this should store a hashed password, not plaintext.';

-- Add a trigger to the `businesses` table to automatically update the `updated_at` field.
CREATE TRIGGER on_businesses_updated
  BEFORE UPDATE ON public.businesses
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_updated_at();


-- ----------------------------------------------------------------
-- Table `public.customers`
-- Stores core information about loyalty program members (customers).
-- Includes credentials and a unique QR token for their digital card.
-- ----------------------------------------------------------------
CREATE TABLE public.customers (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    name text NOT NULL,
    phone_number text NOT NULL UNIQUE,
    password text NOT NULL,
    qrToken text NOT NULL UNIQUE,
    qrDataUrl text NOT NULL,
    points integer NOT NULL DEFAULT 0,
    points_updated_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Add a comment for security best practices.
COMMENT ON COLUMN public.customers.password IS 'For production, this should store a hashed password, not plaintext.';

-- Add a trigger to the `customers` table to automatically update the `updated_at` field.
CREATE TRIGGER on_customers_updated
  BEFORE UPDATE ON public.customers
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_updated_at();


-- ----------------------------------------------------------------
-- Table `public.discounts`
-- Stores promotional offers and discounts created by businesses for
-- their loyalty program members.
-- ----------------------------------------------------------------
CREATE TABLE public.discounts (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    -- This links a discount to the business that created it.
    business_id uuid NOT NULL REFERENCES public.businesses(id) ON DELETE CASCADE,
    name text NOT NULL,
    description text,
    image_url text,
    percentage integer,
    expiry_date timestamptz,
    active boolean NOT NULL DEFAULT true,
    price numeric,
    price_cutoff numeric,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Add an index on business_id for faster lookups of discounts by business.
CREATE INDEX idx_discounts_business_id ON public.discounts(business_id);

-- Add a trigger to the `discounts` table to automatically update the `updated_at` field.
CREATE TRIGGER on_discounts_updated
  BEFORE UPDATE ON public.discounts
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_updated_at();
