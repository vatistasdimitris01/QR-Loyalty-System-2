-- ================================================================
-- DATABASE MIGRATION SCRIPT (v8) - Content & Analytics
-- ================================================================
-- This script adds tables for posts, products, and scan logging,
-- and a function to power the new business analytics dashboard.
-- It also adds a cover photo field to businesses.
-- ================================================================

-- Step 1: Add a cover photo URL to the `businesses` table.
ALTER TABLE public.businesses
ADD COLUMN IF NOT EXISTS cover_photo_url text;

-- Step 2: Create the `posts` table for business announcements.
CREATE TABLE IF NOT EXISTS public.posts (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    business_id uuid NOT NULL REFERENCES public.businesses(id) ON DELETE CASCADE,
    title text NOT NULL,
    content text,
    image_url text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public can view posts." ON public.posts FOR SELECT USING (true);
CREATE POLICY "Businesses can manage their own posts." ON public.posts FOR ALL USING (
    (SELECT id FROM public.businesses WHERE id = business_id) IS NOT NULL
);
GRANT ALL ON TABLE public.posts TO anon;

-- Step 3: Create the `products` table for the business shop tab.
CREATE TABLE IF NOT EXISTS public.products (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    business_id uuid NOT NULL REFERENCES public.businesses(id) ON DELETE CASCADE,
    name text NOT NULL,
    description text,
    price numeric(10, 2),
    image_url text,
    product_url text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public can view products." ON public.products FOR SELECT USING (true);
CREATE POLICY "Businesses can manage their own products." ON public.products FOR ALL USING (
    (SELECT id FROM public.businesses WHERE id = business_id) IS NOT NULL
);
GRANT ALL ON TABLE public.products TO anon;

-- Step 4: Create the `scan_logs` table for analytics.
CREATE TABLE IF NOT EXISTS public.scan_logs (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    business_id uuid NOT NULL REFERENCES public.businesses(id) ON DELETE CASCADE,
    customer_id uuid NOT NULL REFERENCES public.customers(id) ON DELETE CASCADE,
    points_awarded integer NOT NULL,
    reward_claimed boolean DEFAULT false NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE public.scan_logs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Businesses can read their own scan logs." ON public.scan_logs FOR SELECT USING (
    (SELECT id FROM public.businesses WHERE id = business_id) IS NOT NULL
);
-- Service role will be used for inserts from API.

-- Step 5: Create a function to get business analytics.
CREATE OR REPLACE FUNCTION get_business_analytics(p_business_id uuid)
RETURNS TABLE (
    total_customers bigint,
    new_members_7d bigint,
    points_awarded_7d bigint,
    rewards_claimed_7d bigint
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        (SELECT COUNT(*) FROM public.memberships WHERE business_id = p_business_id) AS total_customers,
        (SELECT COUNT(*) FROM public.memberships WHERE business_id = p_business_id AND created_at >= now() - interval '7 days') AS new_members_7d,
        (SELECT COALESCE(SUM(points_awarded), 0) FROM public.scan_logs WHERE business_id = p_business_id AND created_at >= now() - interval '7 days') AS points_awarded_7d,
        (SELECT COUNT(*) FROM public.scan_logs WHERE business_id = p_business_id AND reward_claimed = true AND created_at >= now() - interval '7 days') AS rewards_claimed_7d;
END;
$$ LANGUAGE plpgsql;

-- ================================================================
-- MIGRATION COMPLETE
-- ================================================================
